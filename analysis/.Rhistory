no_outliers
z_scorew
z_scores
str(df[,'bed'])
str(df[,'bath'])
str(df[,'feet'])
#removing outliers
z_scores = as.data.frame(sapply(df[, numeric], function(x) (abs(x-mean(x))/sd(x))))
no_outliers = df[!rowSums(z_scores>3), numeric]
z_scorew
z_scores
head(df)
df = read.csv('../data/NY_realestate2023-02-17-cleaned.csv')
df = df[,-1]
names(df)
numeric = unlist(lapply(df, is.numeric), use.names = FALSE)
summary(df[, numeric])
#removing outliers
z_scores = as.data.frame(sapply(df[, numeric], function(x) (abs(x-mean(x))/sd(x))))
z_scores
mean(df[,'bed'])
mean(df[,'bed'], na.rm = )
mean(df[,'bed'], na.rm = T)
abs(df[,'bed'])
#removing outliers
z_scores = as.data.frame(sapply(df[, numeric], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE))))
head(z_scores)
no_outliers = df[!rowSums(z_scores>3), numeric]
pairs(no_outliers)
nrow(no_outliers)
# library(ggplot2)
# library(tidyverse)
#
test = read.csv('../data/vgsales-cleaned.csv', stringsAsFactors = TRUE)
getwd()
840/60
test = lm(price~bed+bath+feet+latitude+longitude+distance, data=df)
#loading in data
df = read.csv('../data/NY_realestate2023-02-17-cleaned.csv')
df = df[,-1]
names(df)
nrow(df)
numeric = unlist(lapply(df, is.numeric), use.names = FALSE)
test = lm(price~bed+bath+feet+latitude+longitude+distance, data=df)
summary(test)
summary(df)
?read.csv
#loading in data
df = read.csv('../data/NY_realestate2023-02-17-cleaned.csv', row.names = 1)
names(df)
#loading in data
df = read.csv('../data/NY_realestate2023-02-17-cleaned.csv')
names(df)
df = df[,-1]
names(df)
nrow(df)
summary(df)
#loading in data
df = read.csv('../data/NY_realestate2023-02-17-cleaned.csv')
#df = df[,-1]
names(df)
test = lm(price~bed+bath+feet+distance, data=df)
df[585,]
#df = subset(df, select = -c(1))
df$price = as.numeric(df$price)
#loading in data
df = read.csv('../data/NY_realestate2023-02-17-cleaned.csv')
print('Column names:')
print(names(df))
print(paste('Number of rows:', nrow(df)))
#summary stats for numeric
print('Numeric variables:')
numeric = unlist(lapply(df, is.numeric), use.names = FALSE)
names(numericc)
names(numeric)
numeric
names(df,-numeric)
names(df[],-numeric])
names(df[,-numeric])
names(df[,!numeric])
df[375,]
names(df[,numeric])
?glm
test = glm(y~price~bed+bath+feet+distance, data=no_outliers, family = inverse.gaussian)
#removing outliers
print('Removing outliers with a Z-score greater than 3 for any variable...')
z_scores = as.data.frame(sapply(df[, numeric], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE))))
no_outliers = df[!rowSums(z_scores>3), numeric]
print(paste('Number of rows with outliers removed:', nrow(no_outliers)))
test = glm(y~price~bed+bath+feet+distance, data=no_outliers, family = inverse.gaussian)
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = inverse.gaussian)
test
test = glm(price~bed+bath+feet+distance, data=no_outliers[no_outliers$price>0,], family = inverse.gaussian)
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = inverse.gaussian, mustart=fitted(no_outliers)
)
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = inverse.gaussian, mustart=fitted(no_outliers))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma(link="inverse"), mustart=fitted(no_outliers))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = inverse.gaussian, mustart=fitted(no_outliers), link = 'identity')
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = inverse.gaussian, mustart=fitted(no_outliers))
fitted(no_outliers)
fitted(no_outliers$price)
fitted(no_outliers)
?fitted
napredict(no_outliers)
fitted.values(no_outliers)
fitted(no_outliers, na.rm=TRUE)
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = gaussian, link='inverse')
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = gaussian)
test
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma("inverse"))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma("inverse"), mustart = c(1,1,1,1))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma("inverse"), mustart = c(1,1,1,1,1))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma("inverse"), mustart = c(1,1,1))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma("inverse"), mustart = c(1,1))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma("inverse"), mustart = c(1))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma("inverse"), mustart = c(1,1,1,1,1,1,1))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma("inverse"), mustart = 1)
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma("inverse"), mustart = c(1,2))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma("inverse"), mustart = c(1,2,3))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma("inverse"), mustart = c(1,2,3,5))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma("inverse"), mustart = c(1,2,3,5,6))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma("inverse"), mustart = c(1,2,3,5,6,7))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma("inverse"), mustart = c(1,2,3,5,6,7,8))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma("inverse"), mustart = c(1,2,3,5,6,7,8,9))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma("inverse"), mustart = c(1,2,3,5,6,7,8,9,10))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = Gamma)
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = poisson)
test
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = quasipoisson)
test
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = quasi)
test
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = quasibinomial)
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = inverse.gaussian)
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = gaussian)
test
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = gaussian(link='inverse'))
test
rm(tst)
rm(test)
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = gaussian(link='inverse'))
test
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = poisson(link='inverse'))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = gaussian(link='log'))
test
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = gaussian(link='logit'))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = poisson(link='logit'))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = gaussian(link='logit'))
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = gaussian(link='1/mu^2'))
test = glm(y~price~bed+bath+feet+distance, data=no_outliers, family = inverse.gaussian)
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = inverse.gaussian)
?knitr
test = glm(price~bed+bath+feet+distance, data=no_outliers, family = inverse.gaussian, mustart=fitted(no_outliers))
glm(price~bed+bath+feet+distance, data=no_outliers, family = gaussian)
library(randomForest)
set.seed(2023)
no.rf = randomForest(price~bed+bath+feet+distance, data=no_outliers)
?randomForest()
no.rf = randomForest(price~bed+bath+feet+distance, data=no_outliers, na.action = na.roughfix)
summary(no.rf)
no.rf
no.rf$mse
no.rf
library(gbm)
?gbm
library(gbm)
no.boost = gbm(price~bed+bath+feet+distance, distribution="gaussian", data=no_outliers, n.trees=5000, interaction.depth=1)
summarize(no_outliers$price)
summary(no_outliers$price)
summary(df$price)
summary(df$price, no_outliers$price)
summary(df$price, na.omit = FALSE)
?summary()
class(no_outliers$price)
class(df$price)
is.na(df$price)
sum(is.na(df$price))
df$price
no_outliers
no_outliers = df[!rowSums(z_scores>3), numeric]
no_outliers
z_scores
nrow(z_scores)
nrow(df)
nrow(no_outliers)
no_outliers = df[z_scores<3, numeric]
nrow(no_outliers)
rowSums(z_scores[1,])
rowSums(z_scores[1,], na.rm = TRUE)
fitted(no_outliers)
glm(price~bed+bath+feet+distance, data=no_outliers, family = inverse.gaussian)
#removing outliers
print('Removing outliers with a Z-score greater than 3 for any variable...')
z_scores = as.data.frame(sapply(df[, numeric], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE))))
no_outliers = df[!rowSums(z_scores>3, na.rm = TRUE), numeric]
glm(price~bed+bath+feet+distance, data=no_outliers, family = inverse.gaussian)
#print('Some rows removed because "Missing values are not allowed in the response"...')
no.boost = gbm(price~bed+bath+feet+distance, distribution="gaussian", data=no_outliers, n.trees=5000, interaction.depth=1)
summary(no.boost)
no.boost
no.boost
no.pca = prcomp(no_outliers, scale.=TRUE)
?prcomp
sum(is.na(no_outliers$price))
no.pca = prcomp(no_outliers, scale.=TRUE, na.action = na.omit)
no.pca = prcomp(no_outliers, scale.=TRUE, na.omit)
no.pca = prcomp(na.omit(no_outliers), scale.=TRUE)
summary(no.pva)
summary(no.pca)
names(no_outliers)
no.pca = prcomp(na.omit(no_outliers[,c(1:4,7)]), scale.=TRUE)
summary(no.pca)
loadi = round(no.pca$rotation[,1:2], 2)
loadi[abs(loadi)<0.2] <- NA
loadi
no.boost
#loading in data
df = read.csv('../data/NY_realestate2023-02-17-cleaned.csv')
numeric = unlist(lapply(df, is.numeric), use.names = FALSE)
hi = prcomp(df[,numeric], scale. = TRUE)
hi = prcomp(omit.na(df[,numeric]), scale. = TRUE)
hi = prcomp(na.omit(df[,numeric]), scale. = TRUE)
hi
comp = numeric
comp
comp[1] = F
hi = prcomp(na.omit(df[,numeric]), scale. = TRUE)
hi
hi = prcomp(na.omit(df[,comp]), scale. = TRUE)
hi
biplot(hi)
#removing outliers
print('Removing outliers with a Z-score greater than 3 for any variable...')
z_scores = as.data.frame(sapply(df[, numeric], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE))))
no_outliers = df[!rowSums(z_scores>3, na.rm = TRUE), numeric]
print(paste('Number of rows with outliers removed:', nrow(no_outliers)))
names(no_outliers)
numeric
outliers = df[rowSums(z_scores>3, na.rm = TRUE), numeric]
outleors
outliers
nuemric
numeric
names(df)
df[df$price == 1195000, 'address']
hi - (df[df$price == 1195000, 'address'])
hi = (df[df$price == 1195000, 'address'])
length(hi)
#loading in data
df = read.csv('../data/NY_realestate2023-02-17-cleaned.csv')
print('Column names:')
print(names(df))
print(paste('Number of rows:', nrow(df)))
#summary stats for numeric
print('Numeric variables:')
numeric = unlist(lapply(df, is.numeric), use.names = FALSE)
summary(df[, numeric])
#removing outliers
print('Removing outliers with a Z-score greater than 3 for any variable...')
outlier.vars = numeric
outlier.vars[8:10] = F
z_scores = as.data.frame(sapply(df[, outlier.vars], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE))))
no_outliers = df[!rowSums(z_scores>3, na.rm = TRUE), numeric]
outliers = df[rowSums(z_scores>3, na.rm = TRUE), numeric]
print(paste('Number of rows with outliers removed:', nrow(no_outliers)))
nrow(no_outliers)
nrow(df)
nrow(outliers)
hi = (df[df$price == 1195000, 'address'])
hi
hi = (df[df$feet == 2160, 'address'])
hi
hi = (df[(!is.na(df$feet & df$feet == 2160), 'address'])
hi = (df[(!is.na(df$feet) & df$feet == 2160), 'address'])
hi
zscores
z_scores
length(z_scores)
names(z_scores)
to.remove = numeric(0)
to.remove[2] = F
to.remove
to.remove = c(rep(F, nrow(df)))
to.remove
for (i in 1:nrow(df)){
for (j in names(z_scores)){
if (z_scores[i,j] > 3){
to.remove[i] = TRUE
}
}
}
for (i in 1:nrow(df)){
to.remove = c(rep(F, nrow(df)))
for (i in 1:nrow(df)){
for (i in 1:nrow(df)){
for (i in 1:nrow(df)){
for (j in names(z_scores)){
if ((z_scores[i,j] > 3 & (!is.na(z_scores[i,j]))){
to.remove = c(rep(F, nrow(df)))
for (i in 1:nrow(df)){
for (j in names(z_scores)){
if ((z_scores[i,j] > 3 & (!is.na(z_scores[i,j])))){
to.remove[i] = TRUE
}
}
}
table(to.remove)
no_outliers = df[!to.remove,]
nrow(no_outliers)
#loading in data
df = read.csv('../data/NY_realestate2023-02-17-cleaned.csv')
print('Column names:')
print(names(df))
print(paste('Number of rows:', nrow(df)))
#summary stats for numeric
print('Numeric variables:')
numeric = unlist(lapply(df, is.numeric), use.names = FALSE)
summary(df[, numeric])
#removing outliers
print('Removing outliers with a Z-score greater than 3 for any variable...')
outlier.vars = numeric
outlier.vars[8:10] = F
z_scores = as.data.frame(sapply(df[, outlier.vars], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE))))
to.remove = c(rep(F, nrow(df)))
for (i in 1:nrow(df)){
for (j in names(z_scores)){
if ((z_scores[i,j] > 3 & (!is.na(z_scores[i,j])))){
to.remove[i] = TRUE
}
}
}
no_outliers = df[!to.remove,]
outliers = df[to.remove,]
print(paste('Number of rows with outliers removed:', nrow(no_outliers)))
#viewing outliers
print('These are the houses that are considered \'outliers\':')
outliers
names(no_outliers)
#loading in data
df = read.csv('../data/NY_realestate2023-02-17-cleaned.csv')
print('Column names:')
print(names(df))
print(paste('Number of rows:', nrow(df)))
#summary stats for numeric
print('Numeric variables:')
numeric = unlist(lapply(df, is.numeric), use.names = FALSE)
summary(df[, numeric])
#removing outliers
print('Removing outliers with a Z-score greater than 3 for any variable...')
outlier.vars = numeric
outlier.vars[8:10] = F
z_scores = as.data.frame(sapply(df[, outlier.vars], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE))))
to.remove = c(rep(F, nrow(df)))
for (i in 1:nrow(df)){
for (j in names(z_scores)){
if ((z_scores[i,j] > 3 & (!is.na(z_scores[i,j])))){
to.remove[i] = TRUE
}
}
}
no_outliers = df[!to.remove,numeric]
outliers = df[to.remove,]
print(paste('Number of rows after outliers removed:', nrow(no_outliers[,numeric])))
mean(df$price)
mean(outliers$price)
mean(outliers$feet)
mean(outliers$feet, na.rm = T)
mean(df$feet, na.rm = T)
median(df$feet, na.rm = T)
median(outlier$feet, na.rm = T)
median(outliers$feet, na.rm = T)
median(df$price, na.rm = T)
median(outlier$price, na.rm = T)
median(outliers$price, na.rm = T)
median(outliers$bed, na.rm = T)
median(outliers$bath, na.rm = T)
median(df$bed, na.rm = T)
median(df$bath, na.rm = T)
print(df[375,])
print(no_outliers[375,])
print(no_outliers[27,])
?gbm
??gbm
library(gbm)
no.boost = gbm(price~bed+bath+feet+distance, distribution="gaussian", data=no_outliers[,numeric], n.trees=5000, interaction.depth=1)
#loading in data
df = read.csv('../data/NY_realestate2023-02-17-cleaned.csv')
print('Column names:')
print(names(df))
print(paste('Number of rows:', nrow(df)))
#summary stats for numeric
print('Numeric variables:')
numeric = unlist(lapply(df, is.numeric), use.names = FALSE)
summary(df[, numeric])
#removing outliers
print('Removing outliers with a Z-score greater than 3 for any variable...')
outlier.vars = numeric
outlier.vars[8:10] = F
z_scores = as.data.frame(sapply(df[, outlier.vars], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE))))
#no_outliers[,numeric] = df[!rowSums(z_scores>3, na.rm = TRUE), numeric]
#outliers = df[rowSums(z_scores>3, na.rm = TRUE), numeric]
to.remove = c(rep(F, nrow(df)))
for (i in 1:nrow(df)){
for (j in names(z_scores)){
if ((z_scores[i,j] > 3 & (!is.na(z_scores[i,j])))){
to.remove[i] = TRUE
}
}
}
no_outliers = df[!to.remove,]
outliers = df[to.remove,]
print(paste('Number of rows after outliers removed:', nrow(no_outliers[,numeric])))
#viewing outliers
print('\n\nComparing outlier houses to non-outlier houses:')
data.frame(
'Median price' = median(no_outliers$price, na.rm=TRUE),
'median outlier price' = median(outliers$price, na.rm = TRUE)
)
data.frame(
'Median feet' = median(no_outliers$feet, na.rm=TRUE),
'median outlier feet' = median(outliers$feet, na.rm = TRUE)
)
data.frame(
'Median bed' = median(no_outliers$bed, na.rm=TRUE),
'median outlier bed' = median(outliers$bed, na.rm = TRUE)
)
data.frame(
'Median bath' = median(no_outliers$bath, na.rm=TRUE),
'median outlier bath' = median(outliers$bath, na.rm = TRUE)
)
#pairs plot
print('Pairs plot for data with no outliers:')
#pairs(no_outliers[,numeric])
library(GGally)
GGally::ggpairs(no_outliers[,numeric])
no.boost = gbm(price~bed+bath+feet+distance, distribution="gaussian", data=no_outliers[,numeric], n.trees=5000, interaction.depth=1)
no.boost
summary(no.boost)
??mahalanobis
mahalanobis(df[,outlier.vars])
mahalanobis(df[,outlier.vars], colMeans(df[,outlier.vars]), cov(df[,outlier.vars])))
mahalanobis(df[,outlier.vars], colMeans(df[,outlier.vars]), cov(df[,outlier.vars]))
mahalanobis(df[,outlier.vars], colMeans(df[,outlier.vars], na.rm = T), cov(df[,outlier.vars]))
mahalanobis(df[,outlier.vars], colMeans(df[,outlier.vars], na.rm = T), cov(df[,outlier.vars], na.rm = T))
cov(df[,outlier.vars])
?cov
mahalanobis(df[,outlier.vars], colMeans(df[,outlier.vars], na.rm = T), cov(df[,outlier.vars], use='complete.obs'))
hi = mahalanobis(df[,outlier.vars], colMeans(df[,outlier.vars], na.rm = T), cov(df[,outlier.vars], use='complete.obs'))
hi = mahalanobis(df[,outlier.vars], colMeans(df[,outlier.vars], na.rm = T))
hi = mahalanobis(df[,outlier.vars], colMeans(df[,outlier.vars], na.rm = T), cov(df[,outlier.vars], use='pairwise.complete.obs'))
hi
hi = mahalanobis(df[,outlier.vars], colMeans(df[,outlier.vars], na.rm = T), cov(df[,outlier.vars], use='na.or.complete'))
hi
hi = mahalanobis(df[,outlier.vars], colMeans(df[,outlier.vars], na.rm = T), cov(df[,outlier.vars], use='everying'))
hi = mahalanobis(df[,outlier.vars], colMeans(df[,outlier.vars], na.rm = T), cov(df[,outlier.vars], use='everything'))
hi
hi = mahalanobis(df[,outlier.vars], colMeans(df[,outlier.vars], na.rm = T), cov(df[,outlier.vars], use='all.oba'))
hi = mahalanobis(df[,outlier.vars], colMeans(df[,outlier.vars], na.rm = T), cov(df[,outlier.vars], use='all.obs'))
temp = df
temp = no_outliers
temp = temp[-c(27, 375),]
test = lm(price~bed+bath+feet+distance, data=temp[,numeric])
summary(test)
plot(test)
temp = no_outliers
temp = temp[-375,]
temp = temp[-27,]
nrow(no_outliers)
nrow(temp)
test = lm(price~bed+bath+feet+distance, data=temp[,numeric])
plot(test)
test1 = lm(price~bed+bath+feet+distance, data=temp[,numeric])
plot(test1)
no_outliers
temp
nrow(temp)
?reindex
?rownames
?row.names
row.names(outliers)
row.names(no_outliers) = 1:nrow(no_outliers)
temp = no_outliers[-c(27, 375),]
test = lm(price~bed+bath+feet+distance, data=temp[,numeric])
plot(test)
#loading in data
df = read.csv('../data/NY_realestate2023-02-17-cleaned.csv')
print('Column names:')
print(names(df))
print(paste('Number of rows:', nrow(df)))
#summary stats for numeric
print('Numeric variables:')
numeric = unlist(lapply(df, is.numeric), use.names = FALSE)
summary(df[, numeric])
#removing outliers
print('Removing outliers with a Z-score greater than 3 for any variable...')
outlier.vars = numeric
outlier.vars[8:10] = F
z_scores = as.data.frame(sapply(df[, outlier.vars], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE))))
no_outliers = df[!rowSums(z_scores>3, na.rm = TRUE), numeric]
outliers = df[rowSums(z_scores>3, na.rm = TRUE), numeric]
print(paste('Number of rows after outliers removed:', nrow(no_outliers[,numeric])))
df[1, numeric], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE))
apply)df[1, numeric], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE)))
apply(df[1, numeric], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE)))
sapply(df[1, numeric], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE)))
z_scores = as.data.frame(sapply(df[, numeric], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE))))
z_scores[1,]
sapply(df[1, numeric], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE)))
sapply(df[1:2, numeric], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE)))
?rowSums
?rowSum
?rowSums
