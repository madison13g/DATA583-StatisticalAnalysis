plot(x, dgamma(x, shape=11))
plot(x, dgamma(x, shape=9))
plot(x, dgamma(x, shape=(mean(x)^2/sd(x)^2)))
(mean(x)^2/sd(x)^2)
plot(x, dgamma(x, shape=107))
plot(x, dgamma(x, shape=(mean(x)^2/sd(x)^2)))
plot(x, dgamma(x, shape=0.1)
)
plot(x, dgamma(x, shape=10)
)
plot(x, dgamma(x, shape=9))
plot(x, dgamma(x, shape=9.5))
plot(x, dgamma(x, shape=10.5))
x = seq(5, 7, length=500)
plot(density(no_outliers$logprice), main='', ylab='Density',
xlab='Log Price')
lines(x, dnorm(x, mean=mean(no_outliers$logprice), sd = sd(no_outliers$logprice)), type="l", col=2)
price.glm = glm(logprice~bed+bath+feet+distance, data=no_outliers, family = gaussian(link='identity'))
summary(price.glm)
price.glm = glm(logprice~bed+bath+feet+distance, data=no_outliers, family = gaussian(link='inverse'))
summary(price.glm)
price.glm = glm(logprice~bed+bath+feet+distance, data=no_outliers, family = gaussian(link='identity'))
summary(price.glm)
price.glm = glm(logprice~bed+bath+feet+distance, data=no_outliers, family = gaussian(link='log'))
summary(price.glm)
#loading data
df = read.csv('../data/NY_realestate2023-02-17-cleaned.csv')
#logging price!
df[,'logprice'] = log10(df[,'price'])
#setting bed and bath as ordered categorical
df$bed = ordered(df$bed)
df$bath = ordered(df$bath)
#removing outliers
numeric = unlist(lapply(df, is.numeric), use.names = FALSE)
numeric[length(numeric)] = F #removing logprice from numeric
z_scores = as.data.frame(sapply(df[, numeric], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE))))
to.remove = c(rep(F, nrow(df)))
for (i in 1:nrow(df)){
for (j in names(z_scores)){
if ((z_scores[i,j] > 3 & (!is.na(z_scores[i,j])))){
to.remove[i] = TRUE
}
}
}
no_outliers = df[!to.remove,]
row.names(no_outliers) = 1:nrow(no_outliers)
price.glm = glm(logprice~bed+bath+feet+distance, data=no_outliers, family = gaussian(link='identity'))
summary(price.glm)
#loading data
df = read.csv('../data/NY_realestate2023-02-17-cleaned.csv')
#logging price!
df[,'logprice'] = log10(df[,'price'])
#removing outliers
numeric = unlist(lapply(df, is.numeric), use.names = FALSE)
numeric[length(numeric)] = F #removing logprice from numeric
z_scores = as.data.frame(sapply(df[, numeric], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE))))
to.remove = c(rep(F, nrow(df)))
for (i in 1:nrow(df)){
for (j in names(z_scores)){
if ((z_scores[i,j] > 3 & (!is.na(z_scores[i,j])))){
to.remove[i] = TRUE
}
}
}
no_outliers = df[!to.remove,]
row.names(no_outliers) = 1:nrow(no_outliers)
price.lm = lm(logprice~bed+bath+feet+distance, data=no_outliers)
summary(price.lm)
price.glm = glm(logprice~bed+bath+feet+distance, data=no_outliers, family = gaussian(link='identity'))
mean((fitted(price.glm)-na.omit(no_outliers)$price)^2)
summary(price.glm)$r.squared
summary(price.glm)
str(summary(price.glm))
with(summary(price.glm), 1 - deviance/null.deviance)
#loading data
df = read.csv('../data/NY_realestate2023-02-17-cleaned.csv')
#logging price!
df[,'logprice'] = log10(df[,'price'])
#removing outliers
numeric = unlist(lapply(df, is.numeric), use.names = FALSE)
numeric[length(numeric)] = F #removing logprice from numeric
z_scores = as.data.frame(sapply(df[, numeric], function(x) (abs(x-mean(x, na.rm=TRUE))/sd(x, na.rm = TRUE))))
to.remove = c(rep(F, nrow(df)))
for (i in 1:nrow(df)){
for (j in names(z_scores)){
if ((z_scores[i,j] > 3 & (!is.na(z_scores[i,j])))){
to.remove[i] = TRUE
}
}
}
no_outliers = df[!to.remove,]
row.names(no_outliers) = 1:nrow(no_outliers)
price.lm = lm(logprice~bed+bath+feet+distance, data=no_outliers)
summary(price.lm)
car::vif(price.lm)
price.lm2 = lm(logprice~bed+bath+feet+distance, data=df)
summary(price.lm2)
car::vif(price.lm2)
car::vif(price.lm)
library(np)
npcmstest(model = price.lm, xdat = age, ydat = logwage)
summary(price.lm)
price.lm = lm(logprice~bed+bath+feet+distance, data=no_outliers, x=TRUE, y=TRUE)
summary(price.lm)
#supress printing
quiet <- function(x) {
sink(tempfile())
on.exit(sink())
invisible(force(x))
}
X = with(no_outliers,data.frame(bed,bath,feet,distance))
np.test = quiet(with(no_outliers, npcmstest(model = price.lm, xdat = X, ydat = logprice)))
isa = iss
isa = is
np.test = quiet(with(no_outliers, npcmstest(model = price.lm, xdat = X, ydat = logprice)))
np.test
str(np.test)
plot(price.lm)
plot(price.lm)
price.glm = glm(logprice~bed+bath+feet+distance, data=no_outliers, family = gaussian(link='identity'))
np.test = quiet(with(no_outliers, npcmstest(model = price.glm, xdat = X, ydat = logprice)))
price.glm = glm(logprice~bed+bath+feet+distance, data=no_outliers, family = gaussian(link='identity'), y=TRUE, x=TRUE)
np.test = quiet(with(no_outliers, npcmstest(model = price.glm, xdat = X, ydat = logprice)))
np.test
summary(price.glm)
names(no_outliers)
haed(no_outliers[,c(2:4, 10, 11)])
head(no_outliers[,c(2:4, 10, 11)])
#best subset
library(bestglm)
price.bic = bestglm(no_outliers[,c(2:4, 10, 11)], IC='BIC')
price.bic = bestglm(na.omit(no_outliers[,c(2:4, 10, 11)]), IC='BIC')
price.bic
price.bic$BestModel
car::vif(price.lm)
summary(price.bic$BestModel)
summary(price.lm)
price.bic$BestModel
price.bic$BestModel['Coefficients']
str(price.bic$BestModel)
price.bic$BestModel['coefficients']
str(summary(price.bic$BestModel))
summary(price.bic$BestModel)['coefficients']
summary(price.bic$BestModel)['adj.r.squared']
unname(summary(price.bic$BestModel)['adj.r.squared'])
cat('test:', unname(summary(price.bic$BestModel)['adj.r.squared']))
cat('test:', unlist(summary(price.bic$BestModel)['adj.r.squared']))
cat('test:', round(unlist(summary(price.bic$BestModel)['adj.r.squared'])), 2)
cat('test:', round(unlist(summary(price.bic$BestModel)['adj.r.squared']), 2))
summary(price.lm)
summary(price.lm)$coefficients
cat('Full model R^2:', round(unlist(summary(price.lm)['adj.r.squared']), 2))
cat('Full model R^2:', round(unlist(summary(price.lm)['adj.r.squared']), 3))
cat('Best subset R^2:', round(unlist(summary(price.bic$BestModel)['adj.r.squared']), 3))
plot(price.glm)
no_outliers[357,]
step(price.lm)
test = step(price.lm, trace=0)
summary(test)
??proj4string
library(sf)
pnts$region <- apply(pnts, 1, function(row) {
# transformation to palnar is required, since sf library assumes planar projection
tt1_pl <- st_transform(tt1, 2163)
coords <- as.data.frame(matrix(row, nrow = 1,
dimnames = list("", c("x", "y"))))
pnt_sf <- st_transform(st_sfc(st_point(row),crs = 4326), 2163)
# st_intersects with sparse = FALSE returns a logical matrix
# with rows corresponds to argument 1 (points) and
# columns to argument 2 (polygons)
tt1_pl[which(st_intersects(pnt_sf, tt1_pl, sparse = FALSE)), ]$NAME_1
})
library(magrittr)
library(ggplot2)
library(sf)
tt <- read_sf(path, "USA_adm1")
library(terra)
f = "../data/boundaries/geo_export_98de6c3b-3a3b-438d-8233-caac01b47f7c.shp"
map = vect(f)
map
map$boro_name
tt <- read_sf(f)
tt
mix = Mclust(na.omit(no_outliers[,clust.vars]), G=6)
library(mclust)
clust.vars = c('price', 'latitude', 'longitude')
mix = Mclust(na.omit(no_outliers[,clust.vars]), G=6)
pnts = na.omit(no_outliers[,c('latitude', 'longitude')])
mix
#plot(mix, what="BIC")
plot(latitude~longitude, data=na.omit(no_outliers[,clust.vars]), col=mix$classification)
pnts$region <- apply(pnts, 1, function(row) {
# transformation to palnar is required, since sf library assumes planar projection
tt1_pl <- st_transform(tt1, 2163)
coords <- as.data.frame(matrix(row, nrow = 1,
dimnames = list("", c("x", "y"))))
pnt_sf <- st_transform(st_sfc(st_point(row),crs = 4326), 2163)
# st_intersects with sparse = FALSE returns a logical matrix
# with rows corresponds to argument 1 (points) and
# columns to argument 2 (polygons)
tt1_pl[which(st_intersects(pnt_sf, tt1_pl, sparse = FALSE)), ]$NAME_1
})
pnts$region <- apply(pnts, 1, function(row) {
# transformation to palnar is required, since sf library assumes planar projection
tt_pl <- st_transform(tt, 2163)
coords <- as.data.frame(matrix(row, nrow = 1,
dimnames = list("", c("x", "y"))))
pnt_sf <- st_transform(st_sfc(st_point(row),crs = 4326), 2163)
# st_intersects with sparse = FALSE returns a logical matrix
# with rows corresponds to argument 1 (points) and
# columns to argument 2 (polygons)
tt_pl[which(st_intersects(pnt_sf, tt_pl, sparse = FALSE)), ]$NAME_1
})
pnts_sf <- do.call("st_sfc",c(lapply(1:nrow(pnts),
function(i) {st_point(as.numeric(pnts[i, ]))}), list("crs" = 4326)))
pnts_trans <- st_transform(pnts_sf, 2163) # apply transformation to pnts sf
tt1_trans <- st_transform(tt, 2163)      # apply transformation to polygons sf
# intersect and extract state name
pnts$region <- apply(st_intersects(tt1_trans, pnts_trans, sparse = FALSE), 2,
function(col) {
tt1_trans[which(col), ]$NAME_1
})
pnts_sf
pnts
pnts_sf
warnings()
tt
pnts_sf <- do.call("st_sfc",c(lapply(1:nrow(pnts),
function(i) {st_point(as.numeric(pnts[i, ]))}), list("crs" = 4326)))
pnts_trans <- st_transform(pnts_sf, 2163) # apply transformation to pnts sf
tt1_trans <- st_transform(tt, 2163)      # apply transformation to polygons sf
# intersect and extract state name
pnts$region <- apply(st_intersects(tt1_trans, pnts_trans, sparse = FALSE), 2,
function(col) {
tt1_trans[which(col), ]$boro_name
})
tt1_pl <- st_transform(tt, 2163)
tt1_pl
?st_transform
coords <- as.data.frame(matrix(row, nrow = 1,
dimnames = list("", c("x", "y"))))
coords <- as.data.frame(matrix(pnts[1], nrow = 1,
dimnames = list("", c("x", "y"))))
tt <- read_sf(f, '')
??read_sf
tt <- read_sf(f)
tt
pnts_sf <- st_as_sf(pnts, coords = c('latitude', 'longitude'), crs = st_crs(tt))
pnts <- pnts_sf %>% mutate(
intersection = as.integer(st_intersects(geometry, tt))
, area = if_else(is.na(intersection), '', tt$boro_name[intersection])
)
library(dplyr)
pnts_sf <- st_as_sf(pnts, coords = c('latitude', 'longitude'), crs = st_crs(tt))
pnts <- pnts_sf %>% mutate(
intersection = as.integer(st_intersects(geometry, tt))
, area = if_else(is.na(intersection), '', tt$boro_name[intersection])
)
pnts
nrow(pnts)
table(pnts$intersection)
pnts_sf
head(pnts)
head(no_outliers[,c('latitude',"longitude")])
pnts_sf <- st_as_sf(pnts, coords = c('longitude', 'latitude'), crs = st_crs(tt))
pnts <- pnts_sf %>% mutate(
intersection = as.integer(st_intersects(geometry, tt))
, area = if_else(is.na(intersection), '', tt$boro_name[intersection])
)
pnts
pnts
tt
int <- sf::st_intersects(dsf, map)
int <- sf::st_intersects(pnts_sf, tt)
int
pnts$area <- as.character(tt$boro_name[unlist(int)])
ttt
ttt
tt
colnames(tt)
pnts = na.omit(no_outliers[,c('latitude', 'longitude')])
pnts
dsf <- sf::st_as_sf(pnts)
dsf <- sf::st_as_sf(pnts, crs=4326)
dsf <- sf::st_as_sf(pnts, coords=c('latitude', 'longitude'))
dsf
int <- sf::st_intersects(dsf, tt)
st_crs(dsf)
st_crs(tt)
dsf <- sf::st_as_sf(pnts, coords=c('latitude', 'longitude'), crs='WGS84(DD)')
int <- sf::st_intersects(dsf, tt)
st_crs(tt)
st_crs(dsf)
dsf <- sf::st_as_sf(pnts, coords=c('latitude', 'longitude'), crs=4326)
int <- sf::st_intersects(dsf, tt)
tt1 = sf::st_as_df(tt)
tt1 = sf::st_as_sf(tt)
int <- sf::st_intersects(dsf, tt1)
pnts_sf
dsf
tt1
crs(dsf) = WGS84(DD)
crs(dsf) = 'WGS84(DD)'
crs(dsf) <- 'WGS84(DD)'
crs(dsf) <- 'WGS84'
crs(tt)
int <- sf::st_intersects(dsf, tt1)
crs(dsf)
tt1 = st_transform(tt, 2163)
p = st_sfc(pnts , crs = 4267) %>%
st_transform(2163) # transform to  planar as required by st_intersction()
p = st_sfc(st_point(pnts[1,]), crs = 4267) %>%
st_transform(2163) # transform to  planar as required by st_intersction()
pnts[1,]
p = st_sfc(st_point(pnts[2,]), crs = 4267) %>%
st_transform(2163) # transform to  planar as required by st_intersction()
pnts[2,]
p = st_sfc(st_point(unname(pnts[2,])), crs = 4267) %>%
st_transform(2163) # transform to  planar as required by st_intersction()
p = st_sfc(st_point(c(-73.94845, 40.78272)), crs = 4267) %>%
st_transform(2163) # transform to  planar as required by st_intersction()
st_intersection(tt1, p)$boro_name
p
p = st_sfc(pnts, crs = 4267)
pnts
pnts = na.omit(no_outliers[,c('latitude', 'longitude')])
head(pnts)
tt = read_sf(f)
tt1 = st_transform(tt, 2163)
area = c()
for (i in 1:nrow(pnts)){
p = st_transform(st_sfc(pnts, crs = 4267), 2163)
}
for (i in 1:nrow(pnts)){
p = st_transform(st_sfc(c(pnts[i,'longitude'],pnts[i,'latitude']), crs = 4267), 2163)
}
for (i in 1:nrow(pnts)){
p = st_transform(st_sfc(c(pnts[i,'longitude'],pnts[i,'latitude']), crs = 4267), 2163)
area[i] = st_intersection(tt1, p)$boro_name
}
area
p = st_sfc(st_point(c(-73.94845, 40.78272)), crs = 4267) %>%
st_transform(2163) # transform to  planar as required by st_intersction()
st_intersection(tt1, p)$boro_name
for (i in 1:nrow(pnts)){
p = st_transform(st_sfc(st_point(c(pnts[i,'longitude'],pnts[i,'latitude'])), crs = 4267), 2163)
area[i] = st_intersection(tt1, p)$boro_name
}
head(area)
table(area)
?table
?base::table
table(area, useNA = 'ifany')
pnts$area = area
for (i in 1:nrow(pnts)){
p = st_transform(st_sfc(st_point(c(pnts[i,'longitude'],pnts[i,'latitude'])), crs = 4267), 2163)
area[i] = st_intersection(tt1, p)$boro_name
print(area[i])
readLines(1)
}
for (i in 1:nrow(pnts)){
p = st_transform(st_sfc(st_point(c(pnts[i,'longitude'],pnts[i,'latitude'])), crs = 4267), 2163)
area[i] = st_intersection(tt1, p)$boro_name
print(area[i])
readLines(1)
}
for (i in 1:nrow(pnts)){
p = st_transform(st_sfc(st_point(c(pnts[i,'longitude'],pnts[i,'latitude'])), crs = 4267), 2163)
area[i] = st_intersection(tt1, p)$boro_name
print(area[i])
readLines(n=1)
}
warnings()
for (i in 1:nrow(pnts)){
p = st_transform(st_sfc(st_point(c(pnts[i,'longitude'],pnts[i,'latitude'])), crs = 4267), 2163)
area[i] = st_intersection(tt1, p)$boro_name
print(area[i])
print(i)
readLines(n=1)
}
nrow(pnts)
pnts(area)
length(area)
area[530]
area[531]
for (i in 1:nrow(pnts)){
p = st_transform(st_sfc(st_point(c(pnts[i,'longitude'],pnts[i,'latitude'])), crs = 4267), 2163)
temp = st_intersection(tt1, p)$boro_name
if (is.na(temp)){
area[i] = NA
} else {
area[i] = temp
}
}
length(area)
p = st_transform(st_sfc(st_point(c(pnts[531,'longitude'],pnts[531,'latitude'])), crs = 4267), 2163)
temp = st_intersection(tt1, p)$boro_name
temp
temp == ''
length(temp)
p = st_transform(st_sfc(st_point(c(pnts[530,'longitude'],pnts[530,'latitude'])), crs = 4267), 2163)
temp = st_intersection(tt1, p)$boro_name
p = st_transform(st_sfc(st_point(c(pnts[530,'longitude'],pnts[530,'latitude'])), crs = 4267), 2163)
suppressWarnings(temp = st_intersection(tt1, p)$boro_name)
p = st_transform(st_sfc(st_point(c(pnts[530,'longitude'],pnts[530,'latitude'])), crs = 4267), 2163)
temp=suppressWarnings(st_intersection(tt1, p)$boro_name)
temp
for (i in 1:nrow(pnts)){
p = st_transform(st_sfc(st_point(c(pnts[i,'longitude'],pnts[i,'latitude'])), crs = 4267), 2163)
temp = suppressWarnings(st_intersection(tt1, p)$boro_name)
if (length(temp)==0){
area[i] = NA
} else {
area[i] = temp
}
}
length(area)
pnts$area = area
head(pnts$area)
mix
mix$classification
table(mix$classification, pnts$area)
plot(1, 1, col=6)
plot(1, 1, col=5)
mixclass[mixclass == 1]
mixclass = as.character(mix$classification)
mixclass[mixclass == '1']
mixclass[(mixclass == '1' & mixclass == '5')]
mixclass[(mixclass == '1' | mixclass == '5')]
table(area)
plot(1, 1, col=2)
plot(1, 1, col=3)
plot(1, 1, col=4)
plot(1, 1, col=6)
mixclass = as.character(mix$classification)
mixclass[mixclass == '1'] = 'Manhattan A'
mixclass[mixclass == '5'] = 'Manhattan B'
mixclass[mixclass == '2'] = 'Brooklyn'
mixclass[mixclass == '3'] = 'Staten Island'
mixclass[mixclass == '4'] = 'Queens'
mixclass[mixclass == '6'] = 'Bronx'
table(mixclass, pnts$area)
table(mixclass, pnts$area)
#for misclass. rate
mixclass2 = mixclass
mixclass2[mixclass2 == 'Manhattan A'] = 'Manhattan'
mixclass2[mixclass2 == 'Manhattan B'] = 'Manhattan'
tab = table(mixclass2, pnts$area)
tab
cat((sum(tab)-sum(diag(tab)))/sum(tab))
cat('Overlaying boroughs coordinate boundaries:')
library(terra)
f = "../data/boundaries/geo_export_98de6c3b-3a3b-438d-8233-caac01b47f7c.shp"
map = vect(f)
library(sf)
pnts = na.omit(no_outliers[,c('latitude', 'longitude')])
row.names(pnts) = 1:nrow(pnts)
tt = read_sf(f)
tt1 = st_transform(tt, 2163)
area = c()
for (i in 1:nrow(pnts)){
p = st_transform(st_sfc(st_point(c(pnts[i,'longitude'],pnts[i,'latitude'])), crs = 4267), 2163)
temp = suppressWarnings(st_intersection(tt1, p)$boro_name)
if (length(temp)==0){
area[i] = NA
} else {
area[i] = temp
}
}
pnts$area = area
mixclass = as.character(mix$classification)
mixclass[mixclass == '1'] = 'Manhattan A'
mixclass[mixclass == '5'] = 'Manhattan B'
mixclass[mixclass == '2'] = 'Brooklyn'
mixclass[mixclass == '3'] = 'Staten Island'
mixclass[mixclass == '4'] = 'Queens'
mixclass[mixclass == '6'] = 'Bronx'
#for misclass. rate
mixclass2 = mixclass
mixclass2[mixclass2 == 'Manhattan A'] = 'Manhattan'
mixclass2[mixclass2 == 'Manhattan B'] = 'Manhattan'
tab = table(mixclass2, pnts$area)
#misclassification table
cat('Classification table:')
table(mixclass, pnts$area)
cat('Misclassification rate:', (sum(tab)-sum(diag(tab)))/sum(tab)) #counting manhattan a and b as correct
#misclassification table
cat('Classification table:')
table(mixclass, pnts$area)
cat('Misclassification rate:', (sum(tab)-sum(diag(tab)))/sum(tab)) #counting manhattan a and b as correct
price.lm = lm(logprice~bed+bath+feet+distance, data=no_outliers)
cat('Full model coefficients:')
summary(price.lm)$coefficients
cat('Full model R^2:', round(unlist(summary(price.lm)['adj.r.squared']), 3))
#best subset
library(bestglm)
price.bic = bestglm(no_outliers[,c(2:4, 10, 11)], IC='BIC')
table(pnts$area, useNA = 'ifany')
table(mixclass, pnts$area)
table(mixclass, pnts$area, useNA = 'ifany')
table(mixclass, 'true'=area, useNA = 'ifany')
plot(map)
points(latitude~longitude, data=na.omit(no_outliers[,clust.vars]), pch=16, cex=0.4, col=mix$classification)
?annotate
names(table(mixclass))
dput(names(table(mixclass)))
plot(map)
points(latitude~longitude, data=na.omit(no_outliers[,clust.vars]), pch=16, cex=0.4, col=mix$classification)
text(x=c(-74.1, -74, -74.1, -74.1, -74, -73.8), y=c(40.52, 40.54, 40.8, 40.82, 40.86, 40.75), labels=c("Staten Island", "Brooklyn", "Manhattan A", "Manhattan B", "Bronx", "Queens"), col=c(4, 2, 1, 5, 6, 3))
plot(map)
points(latitude~longitude, data=na.omit(no_outliers[,clust.vars]), pch=16, cex=0.4, col=mix$classification)
text(x=c(-74.1, -74, -74.1, -74.1, -74, -73.8), y=c(40.52, 40.54, 40.8, 40.82, 40.86, 40.75), labels=c("Staten Island", "Brooklyn", "Manhattan A", "Manhattan B", "Bronx", "Queens"), col=c(3, 2, 1, 5, 6, 4))
